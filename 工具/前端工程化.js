1.移动端构建

1.css/less/sass/potcss
提供最基础的css，比如说base.css，用于格式化
另一方面，为不同的项目，提供一个基础css，比如table、button、日历、主题色等等

不同的页面对应不同的一个css

其实关键的问题在于，分工。不同的人分属不同页面，然后长期负责。

页面布局使用 box/flex

布局单位使用 js内敛修改 html font-size width/10 = 1rem ;

页面的正常字体使用12px、16px等正常的字体大小

2.js
使用vue.js、zepto、animate.css、fastclick等，来做基础构架
还需要考虑的一点，运维需要，对页面的统计，页面按钮的点击、页面加载时间，在页面的停留时间，用户机型等等

3.跳转到app
跳转到App
App内本身，可以和App开发者约定规则，要具有扩展性。
从外部app调到自己的app
从微信等屏蔽了一半跳转方式的App，建议放弃，避免浪费不必要的精力

4.是否在自己的App内打开的
比较简单的做法是从UA获取，【这一点是需要app开发，自定义的】
另一方面，可以通过sdk的形式，获取到app给我们提供的一些调用app的方法
比如提供【用户名/token/avatar/tel等个人信息】,因为app内部,肯定不应该走登陆流程的

5.支付可以通过 支付宝手机web支付 很方便

6.应用应该全部由前端掌控，但会有一个问题，用户只能访问到html文件
因此会牵扯到后端route问题，不同路由指向不同的文件
但如果用到后端路由，前端开发就可能变得困难，如何破呢？

7.活动
活动页面，是令人头疼的，因为活动真他妈的多啊
所以对于一半的活动页面，是应该开发一套系统的，然后由运维/内容来写页面

8.后台管理系统
这也绝逼是一个大坑，一半的企业后台管理系统，可使用bootstrap/react/angular/jquery来构建
一般是后端同学来做的

还有一个后台，便是商家后台，这一点也是一个大坑
如果自己选择，自己是不太愿意做商家后台的，更愿意做面向普通用户的业务，当然给别人打工，是很难实现财务自由的

9.所以啊，更喜欢做移动端些

10.代码版本管理 svn/git?
这一点由后端来负责吧，毕竟前端对这点的认识不如后端深
因此，还是使用git吧，据jonhax说，他们的代码都是托管到github上，因此对于同类型的公司，代码退管道github上也是问题不大的
这个需要自己训练下

11.前端测试
本地环境的搭建、测试环境的搭建
本地测试环境，与线上环境

12.对于未来的用户，重点在于移动端App/移动web
移动web的作用在于快速分享，传递

13.html5游戏

------------------------------------------------

环境搭建

1.为什么需要环境搭建？
php/node/gulp/webpack 之类等等

git/svn
对于一个大型项目来说，版本控制室需要的
一个主站首页所引用的js，就开发者来说，定然是不能写在一个js文件中的，而是按框架/功能/业务写在不同的js中
测试无误后，打包然后上线，上线之时，先上线新的js文件，再上线html文件

新的js与旧文件相比，需要修改文件名称，并且js文件都是放在cdn上的，业界常用的js文件命名规则是使用【MD5】
这么做得原因是为了防止，别人故意请求不存在的cdn文件，造成缓存？

如此一来会有个问题，便是html文件/tpl文件中的js引用应该如何写
在小店这边的解决方案是使用php，php来控制后端路由，根据不同的请求，返回不同的js引用文件 与 css文件
在这种处理方式的情况下，后端甚至只需要一个tpl文件就够了
另一种解决方案是，使用webpack/gulp之类的打包工具，在html文件中留下钩子，执行打包命令后，该引用的文件也都引用进去了
这是对那种以html文件存在的

新的功能测试通过，发布到线上后，将开发文件上传到git进行备份管理[写一点就提交一次，是没有什么意义的]

2.模板引擎、underscore、lodash、promise、generator

--------------------------------------------------------
再论backbone的模块化
view、router、model、collection

view
id
render
event
router
template
在view层面上把template渲染到一个id上，所有的时间都使用代理委托的方式代理到id上
然后就是其他的一些方法之类的
当hashChange或者stateChange时，加载不同路由对应的页面

但这里有些问题
1.数据发生变化时，页面并不会自动更新，需要手动操作【这是从直观上来看angular、react的优势所在】
2.无法组件化，只能模块化

其实所有的这些mv*框架的流程都是先改变数据，数据变化后再跟新试图
更新视图有像react那样利用js对象映射document，左前后diff的高性能更新
也有像backbone这样，数据变化，然后整个模块的更新
这些都是在数据驱动的基础上的




























