/*
* @Author: zikong
* @Date:   2015-10-10 09:58:41
* @Last Modified by:   zikong
* @Last Modified time: 2016-01-07 13:09:07
*/

'use strict';
---------------------------------------------------------------

git常用命令
[一篇文章](http://www.cnblogs.com/cspku/articles/Git_cmds.html)

// 忽略文件配置
1. 新建一个 .gitignore 文件
```
    # 这里是注释，node_modules表示文件夹
    node_modules
    # readme.md 表示文件
    readme.md
```
>但有个问题，这个配置文件只有在还没有push本地文件的时候才有效，一旦readme.md文件被track了，他就不会忽略文件
解决方案是先把cached清除掉。这么做会删除掉线上相对应的文件。

```
    git rm --cached file/path/to/be/ignored。
    git add .
    git commit -m "fixed untracked files"
```
[附录:一篇文章](http://www.jianshu.com/p/4a1f4b324823)

2. clone一个项目
```
    git clone http://项目地址
```

3. 线上新建了一个项目，需要把本地的项目与线上合并
```
    git remote add origin git@github.com:michaelliao/learngit.git  // 远程添加原生的
    git push -u origin master // 将本地的master分支与线上分支合并关联
    git push origin master // 以后就可以用这个命令提交本地的修改
```
4. 使用客户端/可视化工具
    目前时使用的是Tower，可视化工具的好处就不说了，但也有一些弊端

5. 其他命令
    git reset //回滚
    git merge // 合并
    git checkout // 切换分支
    git push // 提交
    git pull // 下拉
    git status // 查看工作区文件变动
    git diff // 对比
    git branch // 新建分支
    git log // 查看提交信息
    git stash // 保存修改
    git stash apply --index // 恢复保存的修改

6. 遇到的问题

pull的时候Tower提示: could not read Username for 'https://github.com': Device not configured
解决方案
```
    git remote set-url git@github.com:michaelliao/learngit.git
```
[issues](https://github.com/kemayo/sublime-text-git/issues/176)

ssh: connect to host github.com port 22: Connection refused

If you get a connection refused, it means you actually got a packet back which states that your destination does not accept your connection. This could mean a few things:

github.com is down (not too likely, but you could always check their status on https://status.github.com/)

you have an invalid IP address for github.com (manual entry in /etc/hosts or your resolver) which blocks ssh from at least your IP address

you have a firewall along the way to github.com which blocks the ssh traffic (eg. local firewall or corporate firewall)

7. 对比代码
    -> 历史上的两个版本
        git diff -r 历史两个版本号 filename
    -> 历史版本与本地
        git diff -r 历史版本号 filename

    git log -10 --pretty=oneline filename 打印最近提交的

    git diff // 对比整个项目本地与线上
    git diff pathname // 对比文件夹

8. git status

9. 清除本地修改[指定文件、文件夹]
    git checkout -- filename/pathname

10. 问题： 大意是让你确定是否有权限access git项目 或者 git项目是否存在
    解决： 过十分钟，自己就好了

11. 获取git项目的线上地址
    git remote -v

12. 撤销add
    git reset .


13 .gitignore 配置文件
```
*.a       # 忽略所有 .a 结尾的文件
!lib.a    # 但 lib.a 除外
/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/    # 忽略 build/ 目录下的所有文件
doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
```

13. 显示文件内每行的最近提交人
    git blame filename

14. git config
```
filter.lfs.clean=git-lfs clean %f
filter.lfs.smudge=git-lfs smudge %f
filter.lfs.required=true
user.name=zikong
user.email=zikong@mogujie.com
core.filemode=false
url.https://.insteadof=git://
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=true
remote.origin.url=git@gitlab.mogujie.org:f2e/f-day.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.develop.remote=origin
branch.develop.merge=refs/heads/develop
mergetool.tower.cmd="/Applications/Tower.app/Contents/Resources/filemerge.sh" "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
mergetool.tower.trustexitcode=true
```
    显示 => git config --list
    配置 => git config user.name zikong
            git config core.filemode false

    为了避免每次都输入username,email的麻烦
        git config user.name zikong
        git config user.email zikong@mogujie.com
